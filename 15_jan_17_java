Shopping cart
We have implemented 

Aggregation -- Cart has Cart Item
               Catalog has Catalog Item
Overriding -- ToString() method of Object class.
Overloading -- in constructor -- change the number of parametre (CartItem(catalog item, quantity)



We can implement some more concepts here:
------------------------------------------------------------------------------------------------------
E-commerce - 1.Customer -> registration -> user profile
                          Authentication
                          Purchace -> placeorder -> shipping details -> checkout
                          Shopping ->  Shopping Cart -> Cart
                                                        Cart Item                               
                          Purcase history -> order detail
             
             2.Admin - Catalog maintainance -> Catalog 
                                              Catalog Item
                       Customer maintainance ->                     
----------------------------------------------------------------------------------------------------------  



Aggregation --- Customer  -> has -> order detail 
Inheritence --- Order details  -> is in  -> Purchase history 





HashSet ---> use add(E e) method to add the object which is not present in the set.

Now We will use equals and hashcode to compare the address(or id(deep comparision)) of 2
catalog item and then increase the qunatity by using quantity setter.


public int hashCode(){
        return hashcode of 2 catalog item;
    }

public boolean equals(Object o){
       if(o.equals(this.catalogItem)
        return true
        } else {
            return false;
        }
    }



Internal working of add method
------------------------------------------------------------------------------------------------------------------
boolean add(E e)  --  public boolean add(E e) {
                        return map.put(e, PRESENT)==null; }
-------------------------------------------------------------------------------------------------------------------                        
public V put(K key, V value) {
        return putVal(hash(key), key, value, false, true);
    }
    
------------------------------------------------------------------------------------------------------------------------    
     * @param hash ---hash for key
     * @param key ---the key
     * @param value ----the value to put
     * @param onlyIfAbsent ---if true, don't change existing value
     * @param evict ---if false, the table is in creation mode.
     * @return previous value, or null if none
     
     
 final V putVal(int hash, K key, V value, boolean onlyIfAbsent,
                   boolean evict) {
        Node<K,V>[] tab; Node<K,V> p; int n, i;
        if ((tab = table) == null || (n = tab.length) == 0)
            n = (tab = resize()).length;
        if ((p = tab[i = (n - 1) & hash]) == null)
            tab[i] = newNode(hash, key, value, null);
        else {
            Node<K,V> e; K k;
            if (p.hash == hash &&
                ((k = p.key) == key || (key != null && key.equals(k))))
                e = p;
            else if (p instanceof TreeNode)
                e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);
            else {
                for (int binCount = 0; ; ++binCount) {
                    if ((e = p.next) == null) {
                        p.next = newNode(hash, key, value, null);
                        if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st
                            treeifyBin(tab, hash);
                        break;
                    }
                    if (e.hash == hash &&
                        ((k = e.key) == key || (key != null && key.equals(k))))
                        break;
                    p = e;
                }
            }
            if (e != null) { // existing mapping for key
                V oldValue = e.value;
                if (!onlyIfAbsent || oldValue == null)
                    e.value = value;
                afterNodeAccess(e);
                return oldValue;
            }
        }
        ++modCount;
        if (++size > threshold)
            resize();
        afterNodeInsertion(evict);
        return null;
    }
 --------------------------------------------------------------------------------------------------------------------------                               
                                

                  
                  
                  
                  
                  
                  
   
